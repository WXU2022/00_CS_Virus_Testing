classdef mixing_matrices
%     This file defines the mixing_matrices class, and the class object instance will be used to retrive mixing matrix of different sizes for experiments
%     with different virus types. Image pixel representation of the binary
%     mixing matrices is also supported by method of this class.
%
%     Created by Jirong Yi, 20220621, jirong.yi@hologic.com
%
%%
properties(SetAccess=public)

    virusType; % virus type; only support 'MHV-1' and 'COVID-19'
    matrixSize; % for 'COVID-19', only support '16 by 40'; for 'MHV-1', support '3 by 7', '4 by 15', '5 by 31'
    matrix; % 2d array; the participation (mixing) matrix;

end

%%
methods
    function obj = mixing_matrices(virusType,matrixSize,onVis)

        % args
        % - virusType, str, virus type; only support 'MHV-1' and
        % 'COVID-19', 'SYNTHETIC'
        % - matrixSize, str, for 'COVID-19', only support '16 by 40'; for 'MHV-1', support '3 by 7', '4 by 15', '5 by 31'
        % - onVis, str; show pixel visualization if true, or don't show if
        % false
        obj.virusType = virusType;
        obj.matrixSize = matrixSize;
        if strcmp(obj.virusType,'COVID-19')
            obj.matrix = obj.covid19_matrix();
        elseif strcmp(obj.virusType,'MHV-1')
            obj.matrix = obj.mhv1_matrix();
        elseif strcmp(obj.virusType,'SYNTHETIC')
            obj.matrix = obj.synthetic();
        end

        if onVis obj.visMatrix()
        end


    end

    function A = covid19_matrix(obj)
        % get mixing matrix for covid-19 experiments
        % - obj, object of mixing_matrices class
        % - onVis, str; show pixel visualization if true, or don't show if
        % false
        if strcmp(obj.matrixSize,'16 by 40')
            data = load('./poolingMatrices/Bipartite_A_16by40_BestBetaK_row22.mat');
            A = data.A;
        else
            fprintf("%s not supported for COVID-19 virus experiments\n",obj.matrixSize)
        end

    end

    function A = mhv1_matrix(obj)
        % get mixing matrix for mhv-1 experiments
        % - obj, object of mixing_matrices class
        % - onVis, str; show pixel visualization if true, or don't show if
        % false
        if strcmp(obj.matrixSize,'3 by 7')
            %Hanming matric A_3b7
            A = [1,0,0,1,0,1,1;... 
                     0,1,0,1,1,1,0;...
                     0,0,1,0,1,1,1];
            
        elseif strcmp(obj.matrixSize,'4 by 15')
            % Hanming matrix A_4b15
            A = [1,0,0,0,1,0,0,1,1,0,1,0,1,1,1;...
                      0,1,0,0,1,1,0,1,0,1,1,1,1,0,0;...
                      0,0,1,0,0,1,1,0,1,0,1,1,1,1,0;...
                      0,0,0,1,0,0,1,1,0,1,0,1,1,1,1];
            
        elseif strcmp(obj.matrixSize,'5 by 31')
            % Hanming matrix A_5b31
            A = [1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0;...
                                                      0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1;...
                                                      0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0;...
                                                      0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0;...
                                                      0,0,0,0,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1];
        end


    end

    function A = synthetic(obj)
        % generate synthetic mixing matrix; binary random matrix
        matrixSize = strsplit(obj.matrixSize,' by ');
        rng(0);
        A = binornd(1,0.3,str2num(matrixSize{1}),str2num(matrixSize{2}));

    end

    function visMatrix(obj)
        % visualize mixing matrix in image pixel format
        % args
        % - obj, class object of mixing_matrices class
        figure; 
        imshow(obj.matrix,'InitialMagnification',10000)
        if strcmp(obj.matrixSize,'3 by 7')
            yticks([1,2,3])
        elseif strcmp(obj.matrixSize,'4 by 15')
            yticks([1,2,3,4])
        elseif strcmp(obj.matrixSize,'5 by 31')
            yticks([1,2,3,4,5])
        else
            fprintf("Pool indices are automatically adjusted for visualization.\n")
        end
        axis on
        % pause(1); close all;

    end
end


end

% This file represents the participation matrix via pixel matrix.
% 

% 
%% A_16b40 from
% [1] Ghosh et al. Tapestry: a single-round smart 
% pooling technique for COVID-19 testing. medRxiv, 2020.

% IndOneCol = {[4,9,10],...
%              [1,2,12],...
%              [4,11,13],...
%              [6,10,16],...
%              [2,4,15],...
%              [3,5,16],...
%              [12,13,16],...
%              [3,7,10],...
%              [3,15,16],...
%              [5,7,11],...
%              [2,8],...
%              [3,6,13],...
%              [1,8,13],...
%              [1,5,14],...
%              [4,12,14],...
%              [9,11,12],...
%              [2,5,11],...
%              [1,6],...
%              [8,10,15],...
%              [6,12,15],...
%              [4,5,13],...
%              [8,9,16],...
%              [3,8,12],...
%              [2,6,14],...
%              [4,7,11],...
%              [10,13,14],...
%              [2,7,13],...
%              [9,13,15],...
%              [4,12,16],...
%              [3,14],...
%              [5,9,10],...
%              [3,4,9],...
%              [11,14,16],...
%              [1,11,15],...
%              [1,2,15],...
%              [5,6,8],...
%              [6,10,11],...
%              [7,9,14],...
%              [1,7,16],...
%              [7,11,15]};
% A16b40 = zeros(16,40);
% for i=1:40
%     ind = IndOneCol{i};
%     A16b40(ind,i) = 1;
% end
% 
% figure;
% imshow(A16b40,'InitialMagnification',10000)
% axis on


%% A_24b60 from
% [1] Ghosh et al. Tapestry: a single-round smart 
% pooling technique for COVID-19 testing. medRxiv, 2020.

% IndOneRow = {[9,28,38,46,54,55],...
%              [10,27,30,36,41,49,54],...
%              [2,5,25,34,37,47,56],...
%              [4,17,22,29,33,47,57],...
%              [8,25,32,40,43,59],...
%              [9,16,33,36,40,53,60],...
%              [2,16,24,45,48,50,51],...
%              [6,11,37,42,45,55],...
%              [1,21,29,35,40,41,55],...
%              [9,17,18,20,37,49,58],...
%              [10,20,23,29,39,56,58],...
%              [3,13,14,16,23,31,34],...
%              [21,23,27,33,44,46,59],...
%              [1,5,6,10,18,24,57],...
%              [5,7,14,26,48,52],...
%              [12,13,18,19,26,27,43,],...
%              [22,26,28,35,44,53],...
%              [3,19,21,39,45,47,49],...
%              [15,20,22,41,43,51,60],...
%              [8,12,20,30,38,50],...
%              [2,13,15,39,52,57,59],...
%              [7,17,24,25,30,31,42,],...
%              [4,11,19,34,50,52,60],...
%              [4,31,32,35,36,46,51]};
% A24b60 = zeros(24,60);
% for i=1:24
%     try
%        ind = IndOneRow{i};
%        A24b60(i,ind) = 1;
%     catch
%         i
%     end
% end
% 
% figure;
% imshow(A24b60,'InitialMagnification',10000)
% axis on




